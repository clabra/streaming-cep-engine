{"name":"Streaming-cep-engine","tagline":"Streaming CEP Engine Powered by Spark Streaming & Siddhi","body":"STREAMING-CEP-ENGINE\r\n===================\r\n\r\n\r\nStreaming CEP engine is a Complex Event Processing platform built on Spark Streaming.\r\n\r\nIt is the result of combining the power of Spark Streaming as a continuous computing framework and Siddhi CEP engine as complex event processing engine.\r\n\r\n\r\nWhat is Complex Event Processing?\r\n--------------------------\r\n\r\nComplex event processing, or CEP, is event processing that combines data from multiple sources to infer events or patterns that suggest more complicated circumstances.\r\n\r\n CEP as a technique helps discover complex events by analyzing and correlating other events\r\n\r\n\r\nStreaming Cep Engine components\r\n-----------------------------------------\r\n\r\n- [Engine](engine/README.md)\r\n- [Api](api/README.md)\r\n- [Shell](shell/README.md)\r\n- [Examples](examples/README.md)\r\n- [Documentation](doc/about.md)\r\n\r\n\r\n\r\nStream Query Language\r\n----------------------------\r\n\r\n\r\n**1 Stream Definition Language (SDL)**\r\n\r\n* Create, alter or drop a stream, add new queries or remove existing queries\r\n\r\n\r\n**2 Stream Manipulation Language (SML)**\r\n\r\n* Insert events into a stream and list the existing streams in the engine.\r\n\r\n**3 Stream Action Language (SAL)**\r\n\r\n* Listen to a stream (kafka), save the stream to Cassandra or mongoDB (auto-creation of tables), index the stream to ElasticSearch… here you should find useful operations ready to use.\r\n\r\n* Start & Stop each action on-demand\r\n\r\n\r\n**4 Built-in functions**\r\n\r\n\r\n* Auditing all the requests in the streaming engine (Cassandra or MongoDB)\r\n* Statistics (requests per operation, requests per stream…)\r\n* Failover system (recovering windows, streams and queries from Cassandra or MongoDB)\r\n\r\n\r\nStreaming Cep Engine: API\r\n------------------------------\r\n\r\n* Java & Scala API\r\n* Simple programming model\r\n* Available as maven dependency\r\n\r\n\r\n\r\nStreaming Cep Engine: SHELL\r\n----------------------------------\r\n\r\n* Autocomplete & help\r\n* Tab-completion for stream names\r\n* Built on the API\r\n\r\n\r\n\r\nInteresting facts about Streaming Cep Engine\r\n-----------------------------------------------\r\n\r\n * It was presented in Spark Summit 2014 ([link](http://spark-summit.org/2014/talk/stratio-streaming-a-new-approach-to-spark-streaming))\r\n * Up to 10 million events per minute in a single node.\r\n * It is fully open source. \r\n\r\n\r\nStreaming CEP engine FAQ\r\n-------------------------\r\n\r\n\r\n**Is Streaming CEP engine multi-persistence?**\r\n\r\n*For sure, we have included ready-to-use actions in the engine that allows you, any time, to start or stop saving all the events in that stream to the persistence of your choice: MongoDB, Cassandra or ElasticSearch.*\r\n\r\n*The engine takes care about creating keyspaces, tables, collections, indexes or whatever it needs to properly store the events (and,what’s more, if the stream is changed by an alter request, Stratio Streaming will also change the persistence for you).*\r\n\r\n**Can I work with temporal windows?**\r\n\r\n*Time is a first-class citizen in a CEP engine so yes, you can work with temporal windows. Anyway, length windows and others are also supported, and there are a lot of operators for your queries (avg, count, sum, max, min, patterns, sequences, joins…)*\r\n\r\n**How can I send data to the engine?**\r\n\r\n*Use the API or the Shell provided by Streaming CEP engine. You can send a really BIG amount of events.*\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}